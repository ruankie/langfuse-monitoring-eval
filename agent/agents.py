from graph import get_compiled_graph
from langfuse.decorators import observe, langfuse_context
from langfuse.callback import CallbackHandler


class BasicAgent:
    @observe(
        name="Invoke Agent",
        capture_input=False,
        capture_output=False,
    )
    def invoke(self, prompt: str) -> dict:
        """
        Invokes the agent with a given prompt.

        Args:
            prompt (str): The input prompt to process.

        Returns:
            Dict with keys:
                - final_response (str): The final response generated by the agent.
                - lf_trace_id (str): The trace ID associated with Langfuse for tracking.
                - docs (list[str]): A list of documents retrieved by the agent during the invocation.
        """
        # Get response
        response = "Hi, I'm too basic to answer any questions."

        # Update langfuse trace details
        langfuse_context.update_current_observation(
            input=prompt,
            output=response,
        )
        lf_trace_id = langfuse_context.get_current_trace_id()

        return {"final_response": response, "docs": "NONE", "lf_trace_id": lf_trace_id}


class AdvancedAgent:
    def __init__(self):
        self.graph = get_compiled_graph()
        self.lf_callback = CallbackHandler()

    @observe(
        name="Invoke Agent",
        capture_input=False,
        capture_output=False,
    )
    def invoke(self, prompt: str) -> dict:
        """
        Invokes the agent with a given prompt.

        Args:
            prompt (str): The input prompt to process.

        Returns:
            Dict with keys:
                - final_response (str): The final response generated by the agent.
                - lf_trace_id (str): The trace ID associated with Langfuse for tracking.
                - docs (list[str]): A list of documents retrieved by the agent during the invocation.
        """
        # Get response
        response_dict = self.graph.invoke(
            {"question": prompt}, config={"callbacks": [self.lf_callback]}
        )
        response = response_dict["generation"]
        docs = [d.page_content for d in response_dict["documents"]]

        # Update langfuse trace details
        langfuse_context.update_current_observation(
            input=prompt,
            output=response,
        )
        lf_trace_id = langfuse_context.get_current_trace_id()

        return {"final_response": response, "docs": docs, "lf_trace_id": lf_trace_id}
